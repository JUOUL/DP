最长非降子序列：一个序列有N个数：A[1],A[2],…,A[N]，求出最长非降子序列的长度。

最长非降子序列问题可以使用动态规划来解决。我们引入状态变量dp(i)，表示以第i个元素结尾的最长非降子序列的长度。对于一个元素A[i]，它前面所有小于等于自己的元素Aj，都可能成为与之构成的最长非降子序列的一部分，因此可以得到如下的状态转移方程：

dp(i) = max{dp(j)+1} (0 ≤ j < i, A[j] ≤ A[i])

其中，dp(j)表示以A[j]结尾的最长非降子序列的长度。

最终答案为所有dp(i)中的最大值。

以下是C++代码实现：

const int MAXN = ...; // 最大数组长度
int A[MAXN]; // 数组A
int dp[MAXN]; // 状态数组

int main() {
    int n;
    // 读入n和数组A

    dp[0] = 1;
    int ans = dp[0];
    for (int i = 1; i < n; i++) {
        dp[i] = 1;
        for (int j = 0; j < i; j++) {
            if (A[j] <= A[i]) {
                dp[i] = max(dp[i], dp[j]+1);
            }
        }
        ans = max(ans, dp[i]);
    }

    return ans;
}
时间复杂度为O(n^2)，空间复杂度为O(n)。
